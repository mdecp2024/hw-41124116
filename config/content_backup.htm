<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41124116">https://github.com/mdecp2024/hw-41124116</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41124116/content/index.html">https://mdecp2024.github.io/hw-41124116/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h4>加入brython</h4>
<p>如何將<span>brython加入至網頁</span></p>
<h3>w7</h3>
<p><a href="https://youtu.be/jVvwHv7IgvQ?si=jplYVs8jETXhU62-">如何利用 ShareX 與 Zoomit 拍攝電腦操作流程影片。</a></p>
<p><a href="https://youtu.be/n-DtMPENhVw?si=Fj1tfgkAQwpUQmIX">如何加入 Brython 頁面, 並用來編寫 print 與 for 迴圈相關程式。</a></p>
<h3>w11_hw</h3>
<p>以下影片說明如何利用近端可攜系統維護個人作業網站:</p>
<p>1. 已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>第一題解答:<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/41124116/373b5caee14b9918bc734f45ee3d1101/raw/cae31d9241f0c223293ee6d79e5ed631812e3199/(1).py">"*"字號圖形</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6dulncOt9lA?si=olKoa5DVJM-EfyVc" title="YouTube video player" width="560"></iframe></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p>第二題解答:<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/41124116/373b5caee14b9918bc734f45ee3d1101/raw/cae31d9241f0c223293ee6d79e5ed631812e3199/(2).py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/N82Fvv6wTqE?si=3JRmKnAO_5SVNqLN" title="YouTube video player" width="560"></iframe></p>
<h3>w12_hw</h3>
<p><a href="https://gist.githubusercontent.com/41124116/4f8e6a40aa9ffe78f77935c0941d1dc2/raw/af2e151e40fc625a82fa0dc906d2bebfa61a8023/w12.py">gist連結</a></p>
<p><a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/4f8e6a40aa9ffe78f77935c0941d1dc2/raw/af2e151e40fc625a82fa0dc906d2bebfa61a8023/w12.py">for迴圈</a></p>
<p>心得:透過網路搜尋能夠快速解決我的問題</p>
<p>程式語法:</p>
<p><code>range(1, 6)</code><span> </span>會生成一個從 1 到 5 的數字範圍。</p>
<p><code>for i in range(1, 6)</code><span> </span>用來遍歷這些數字。</p>
<p><code>print(f"數字: {i}")</code><span> </span>會在每次迭代時輸出當前的數字。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/r_m36khdkx8?si=I53gol5BHhH6XaRW" title="YouTube video player" width="560"></iframe></p>
<p data-pm-slice="1 1 []"><a href="https://gist.githubusercontent.com/41124116/b571b17ac9fd3cd153c4635273f8c3dd/raw/089bcf670d8d407e20a2af2a13239e403b135c49/41124116.py">gist連結</a></p>
<p data-pm-slice="1 1 []"><a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/b571b17ac9fd3cd153c4635273f8c3dd/raw/089bcf670d8d407e20a2af2a13239e403b135c49/41124116.py">print迴圈</a></p>
<p data-pm-slice="1 1 []">心得:操作的部分跟<span>for迴圈一模一樣，差在這次要在程式裡新增print迴圈執行的元素，也能在網路上搜尋為你更快速解答</span></p>
<p>程式語法:</p>
<p><code>range(1, 6)</code><span> </span>會產生一個範圍，包括數字 1 到 5。</p>
<p><code>print(f"數字: {i}")</code><span> </span>會將每次迭代的數字打印出來。</p>
<p>我們定義了一個包含手機名稱的列表<span> </span><code>fruits</code>。</p>
<p><code>for fruit in fruits</code><span> </span>會遍歷列表中的每個元素，並使用<span> </span><code>print</code><span> </span>打印出來。</p>
<p><code>i ** 2</code><span> </span>會計算每個數字的平方並打印出來。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/INrs2LS8PzA?si=cdJZBaSF8gEF_2ll" title="YouTube video player" width="560"></iframe></p>
<h3>w13_hw</h3>
<p><span>W13題目:<a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/4f9faf77ac733eb66e95d74700c265fe/raw/b2b372aa716a79f4694f46d45b0dc92c523a1739/41124116.py">重疊方形</a></span></p>
<p><span>程式語法:</span></p>
<p><span>from browser import html #導入html函式庫<br/>from browser import document as doc #導入document程式庫並在程式中命名(簡寫)為doc<br/> <br/># 利用 html 建立 canvas 超文件物件<br/>canvas = html.CANVAS(width = 400,height = 400) #將變數canvas指定為html.CANVAS(width = 400,height = 400) <br/>#意思是建立*(準備)一個400*400的空間(畫布)<br/>brython_div = doc["brython_div1"] #將變數brython_div指定為doc["brython_div1"]<br/>brython_div &lt;= canvas #將canve指定為子元素加入倒brython_div中<br/> <br/># 每一格的 pixel 數<br/>gs = 200<br/> <br/># gs*tc = canvas width and height<br/> <br/>ctx = canvas.getContext("2d") #將ctx指定(簡寫)為canvas.getContext("2d") (獲取畫布（canvas）的 2D 繪圖上下文 (context))<br/>width=1 #方形的寬<br/>height=1 #方形的高<br/> <br/>#第一個方形<br/>for i in range(width): <br/> for j in range(height):<br/> #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")<br/> ctx.lineWidth=1<br/> ctx.strokeStyle='red'<br/> ctx.beginPath();<br/> ctx.rect(i*gs,j*gs,gs,gs)<br/> ctx.stroke();<br/> <br/>#第二個偏移的方形<br/>for i in range(width): <br/> for j in range(height):<br/> #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")<br/> ctx.lineWidth=1<br/> ctx.strokeStyle='red'<br/> ctx.beginPath();<br/> ctx.rect(i*gs+100,j*gs+100,gs,gs) #gs+100代表往右下偏移100像素<br/> ctx.stroke();<br/></span></p>
<p><span></span></p>
<p><span>w13 <a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/4f9faf77ac733eb66e95d74700c265fe/raw/977661edf7d87d9dee91e060cd77ca52c42b6c75/w13%25E4%25BD%259C%25E6%25A5%25AD">作業</a></span></p>
<p><span>程式語法:</span></p>
<p>from browser import html<br/>from browser import document as doc</p>
<p># 建立 canvas 元素<br/>canvas = html.CANVAS(width=500, height=500)<br/>brython_div = doc["brython_div1"]<br/>brython_div &lt;= canvas</p>
<p># 定義圓心和半徑<br/>x1, y1 = 200, 200 # 第一個圓的圓心<br/>x2, y2 = 300, 300 # 第二個圓的圓心<br/>radius = 141.4 # 圓的半徑</p>
<p>ctx = canvas.getContext("2d")</p>
<p># === 繪製第一個圓 ===<br/>ctx.beginPath()<br/>ctx.arc(x1, y1, radius, 0, 2 * 3.14159)<br/>ctx.fillStyle = "black"<br/>ctx.fill()</p>
<p># === 繪製重疊區域 (黑色交集區塊) ===<br/>ctx.save() # 保存繪圖狀態<br/>ctx.beginPath()<br/>ctx.arc(x1, y1, radius, 0, 2 * 3.14159)<br/>ctx.clip() # 限制繪圖範圍為第一個圓</p>
<p>ctx.beginPath()<br/>ctx.arc(x2, y2, radius, 0, 2 * 3.14159)<br/>ctx.fillStyle = "black"<br/>ctx.fill()<br/>ctx.restore() # 恢復繪圖狀態</p>
<p># === 填充第一個圓其他區域 ===<br/># 填充左半部分 (紫色)<br/>ctx.beginPath()<br/>ctx.moveTo(x1, y1)<br/>ctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)<br/>ctx.closePath()<br/>ctx.fillStyle = "Purple"<br/>ctx.fill()</p>
<p># 填充上半部分 (粉色)<br/>ctx.beginPath()<br/>ctx.moveTo(x1, y1)<br/>ctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)<br/>ctx.closePath()<br/>ctx.fillStyle = "pink"<br/>ctx.fill()</p>
<p># 填充左下部分 (藍色)<br/>ctx.beginPath()<br/>ctx.moveTo(x1, y1)<br/>ctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)<br/>ctx.closePath()<br/>ctx.fillStyle = "blue"<br/>ctx.fill()</p>
<p># === 填充第二個圓區域 ===</p>
<p># 填充右上部分 (粉色)<br/>ctx.beginPath()<br/>ctx.moveTo(x2, y2)<br/>ctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)<br/>ctx.closePath()<br/>ctx.fillStyle = "pink"<br/>ctx.fill()</p>
<p># 填充右下部分 (橘色)<br/>ctx.beginPath()<br/>ctx.moveTo(x2, y2)<br/>ctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)<br/>ctx.closePath()<br/>ctx.fillStyle = "orange"<br/>ctx.fill()</p>
<p># 填充下半部分 (綠色)<br/>ctx.beginPath()<br/>ctx.moveTo(x2, y2)<br/>ctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)<br/>ctx.closePath()<br/>ctx.fillStyle = "green"<br/>ctx.fill()</p>
<p># === 繪製輔助框架與對角線 ===<br/># 繪製兩個圓的邊框<br/>ctx.lineWidth = 2<br/>ctx.strokeStyle = "black"<br/>ctx.beginPath()<br/>ctx.arc(x1, y1, radius, 0, 2 * 3.14159)<br/>ctx.stroke()</p>
<p>ctx.beginPath()<br/>ctx.arc(x2, y2, radius, 0, 2 * 3.14159)<br/>ctx.stroke()</p>
<p># 繪製正方形框架<br/>ctx.lineWidth = 2<br/>ctx.strokeStyle = "red"</p>
<p># 第一個正方形<br/>ctx.beginPath()<br/>ctx.rect(100, 100, 200, 200)<br/>ctx.stroke()<br/>ctx.fillStyle = "orange" # 填充顏色<br/>ctx.fill()<br/># 第二個正方形<br/>ctx.beginPath()<br/>ctx.rect(200, 200, 200, 200)<br/>ctx.stroke()<br/>ctx.fillStyle = "pink" # 填充顏色<br/>ctx.fill()<br/># 繪製對角線<br/>ctx.lineWidth = 2<br/>ctx.strokeStyle = "black"<br/>ctx.beginPath()<br/>ctx.moveTo(100, 100)<br/>ctx.lineTo(300, 300)<br/>ctx.stroke()</p>
<h3>w14_hw</h3>
<p>w14:<a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/26c3520c43476705edd5663d6e178d9c/raw/055c1dc4126439157f99fc002969d9cf5292b04e/41124116.py">作業</a></p>
<p>程式語法:</p>
<p>from browser import html<br/>from browser import document as doc<br/>import random<br/>import math</p>
<p># 定義一個函式來初始化畫布<br/>def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):<br/> # 創建 canvas 並設置寬度與高度<br/> canvas = html.CANVAS(width=canvas_width, height=canvas_height)<br/> brython_div = doc[id]<br/> brython_div &lt;= canvas<br/> <br/> # 獲取 canvas 的 2D 上下文<br/> ctx = canvas.getContext("2d")<br/> <br/> return canvas, ctx</p>
<p># 定義一個隨機顏色生成函式<br/>def random_color_generator():<br/> r = random.randint(0, 255)<br/> g = random.randint(0, 255)<br/> b = random.randint(0, 255)<br/> return f"rgb({r}, {g}, {b})"</p>
<p># 判斷點 (px, py) 是否在圓內<br/>def is_point_in_circle(px, py, cx, cy, r):<br/> return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2</p>
<p># 使用者設定的圓心座標和半徑，並進行掃描線填充<br/>def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):<br/> # 初始化畫布<br/> canvas, ctx = initialize_canvas(400, 400)<br/> <br/> # 清除畫布<br/> ctx.clearRect(0, 0, canvas.width, canvas.height)<br/> <br/> # 顏色區域存儲<br/> color_dict = {}</p>
<p># 使用掃描線方法填充區域<br/> for py in range(0, canvas.height):<br/> # 逐行掃描，判斷每個點是否在圓內<br/> current_color = None # 當前掃描線區域的顏色<br/> for px in range(0, canvas.width):<br/> in_circle1 = is_point_in_circle(px, py, x1, y1, r1)<br/> in_circle2 = is_point_in_circle(px, py, x2, y2, r2)<br/> in_circle3 = is_point_in_circle(px, py, x3, y3, r3)<br/> <br/> if in_circle1 and in_circle2 and in_circle3:<br/> # 三個圓的交集區域<br/> if "intersection_all" not in color_dict:<br/> color_dict["intersection_all"] = random_color_generator()<br/> current_color = color_dict["intersection_all"]<br/> elif in_circle1 and in_circle2:<br/> # 只有圓1和圓2的交集區域<br/> if "intersection_1_2" not in color_dict:<br/> color_dict["intersection_1_2"] = random_color_generator()<br/> current_color = color_dict["intersection_1_2"]<br/> elif in_circle2 and in_circle3:<br/> # 只有圓2和圓3的交集區域<br/> if "intersection_2_3" not in color_dict:<br/> color_dict["intersection_2_3"] = random_color_generator()<br/> current_color = color_dict["intersection_2_3"]<br/> elif in_circle1 and in_circle3:<br/> # 只有圓1和圓3的交集區域<br/> if "intersection_1_3" not in color_dict:<br/> color_dict["intersection_1_3"] = random_color_generator()<br/> current_color = color_dict["intersection_1_3"]<br/> elif in_circle1:<br/> # 只在圓1內<br/> if "circle1" not in color_dict:<br/> color_dict["circle1"] = random_color_generator()<br/> current_color = color_dict["circle1"]<br/> elif in_circle2:<br/> # 只在圓2內<br/> if "circle2" not in color_dict:<br/> color_dict["circle2"] = random_color_generator()<br/> current_color = color_dict["circle2"]<br/> elif in_circle3:<br/> # 只在圓3內<br/> if "circle3" not in color_dict:<br/> color_dict["circle3"] = random_color_generator()<br/> current_color = color_dict["circle3"]<br/> else:<br/> # 點不在任何圓內，畫外區域<br/> current_color = "white" # 背景色白色</p>
<p># 填充顏色<br/> ctx.fillStyle = current_color<br/> ctx.fillRect(px, py, 1, 1) # 填充一個像素</p>
<p># 直接設定圓心和半徑<br/>x1, y1, r1 = 150, 200, 100 # 圓1：圓心 (150, 200)，半徑 100<br/>x2, y2, r2 = 250, 200, 100 # 圓2：圓心 (250, 200)，半徑 100<br/>x3, y3, r3 = 200, 100, 100 # 圓3：圓心 (200, 100)，半徑 100</p>
<p># 呼叫畫圓函式<br/>draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</p>
<h3>w15</h3>
<p>題目一:<a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/aa40343584cf2d2f566cfc99d3f1f3b6/raw/83db24159f113247988ac115e0fb0f5f80b563d1/41124116.py">從 1 累加到 100</a></p>
<p><span>程式語法:</span></p>
<p>初始化<span> </span><code>total = 0</code>，用來儲存累加的結果。</p>
<p>使用<span> </span><code>for i in range(1, 101)</code>，讓<span> </span><code>i</code><span> </span>從 1 迭代到 100（<code>range(1, 101)</code><span> </span>會產生 1 到 100 的範圍）。</p>
<p>在迴圈內，<code>total += i</code><span> </span>會將每個數字<span> </span><code>i</code><span> </span>加到<span> </span><code>total</code><span> </span>中。</p>
<p>最後，<code>print</code><span> </span>會顯示最終的累加結果。</p>
<p>心得:<span>從 1 累加到 100 的程式，雖然很簡單，我利用網路搜尋了解如何利用程式來進行數字的累加運算，學會了Python 中的基本語法和邏輯結構。</span></p>
<p></p>
<p>題目二:<a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/aa40343584cf2d2f566cfc99d3f1f3b6/raw/17caca57460db128b44ff8fad5e04d38d6723214/41124116(2).py">addto</a></p>
<p><span>程式語法:</span></p>
<p><code>addto(start, end)</code><span> </span>函式接受兩個參數：<code>start</code><span> </span>和<span> </span><code>end</code>，表示要累加的數字範圍。</p>
<p><code>total = 0</code><span> </span>用來儲存累加的結果。</p>
<p><code>for i in range(start, end + 1)</code><span> </span>使用<span> </span><code>range</code><span> </span>函式來生成從<span> </span><code>start</code><span> </span>到<span> </span><code>end</code><span> </span>的數字。</p>
<p>在迴圈內，<code>total += i</code><span> </span>會將每個數字累加到<span> </span><code>total</code><span> </span>變數中。</p>
<p>最後，<code>return total</code><span> </span>返回累加的總和。</p>
<p>當你調用<span> </span><code>addto(1, 100)</code><span> </span>時，這個函式會計算從 1 到 100 的總和並輸出結果。</p>
<p>心得:<span> </span><code>addto(start, end)</code><span> 函式，Python 中的函式設計、循環結構以及累加運算，對 Python 基礎語法和編程邏輯的掌握，小困難但有網路搜尋的幫助讓我更順利。</span></p>
<p></p>
<p>題目三:<a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/aa40343584cf2d2f566cfc99d3f1f3b6/raw/39a2e14367b4f54252e8f554245a1a192b76a1e2/41124116(3).py">add_only_even</a></p>
<p>程式語法:</p>
<p><code>add_only_even(start, end)</code><span> </span>函式接受兩個參數<span> </span><code>start</code><span> </span>和<span> </span><code>end</code>，表示數字範圍。</p>
<p><code>total = 0</code><span> </span>用來儲存累加的結果。</p>
<p><code>for i in range(start, end + 1)</code><span> </span>會遍歷從<span> </span><code>start</code><span> </span>到<span> </span><code>end</code><span> </span>之間的每個整數。</p>
<p><code>if i % 2 == 0</code><span> </span>用來檢查每個數字是否是偶數。如果是偶數，則將其加到<span> </span><code>total</code><span> </span>中。</p>
<p>最後，<code>return total</code><span> </span>返回累加的偶數總和。</p>
<p><span>心得:<code>add_only_even(start, end)</code> 函式，讓我更加了解如何使用 Python 中的基本語法和結構（如循環、條件判斷和函式設計），Python 程式讓我知道他的好用，總有一天需要用到他的。</span></p>
<p><span></span></p>
<p>題目四:<a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/aa40343584cf2d2f566cfc99d3f1f3b6/raw/7db96402e0c7de27a0f95669b24d38428ee57a86/41124116(4).py">add_avoid_8</a></p>
<p>程式語法:</p>
<p><code>add_avoid_8(start, end)</code><span> </span>函式接受兩個參數<span> </span><code>start</code><span> </span>和<span> </span><code>end</code>，表示數字範圍。</p>
<p><code>total = 0</code><span> </span>用來儲存累加的結果。</p>
<p><code>for i in range(start, end + 1)</code><span> </span>用來遍歷從<span> </span><code>start</code><span> </span>到<span> </span><code>end</code><span> </span>之間的每個整數。</p>
<p><code>if '8' in str(i)</code><span> </span>用來檢查數字<span> </span><code>i</code><span> </span>是否包含 "8"。這是通過將數字<span> </span><code>i</code><span> </span>轉換為字串，然後檢查其中是否含有 "8"。</p>
<p><code>continue</code><span> </span>表示如果數字包含 "8"，則跳過這個數字，不進行累加。</p>
<p>如果數字不包含 "8"，則使用<span> </span><code>total += i</code><span> </span>累加到總和。</p>
<p>最後，<code>return total</code><span> </span>返回累加的結果。</p>
<p><span>心得:這次的作業讓我學會如何在 Python 中設計具條件篩選的累加函式，可以利用在程式中使用條件語句、字串操作和循環結構來解決問題，Python 語言用很簡單的語法來快速完成複雜的邏輯處理讓我做事更有效率。</span></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/e39f139319b6d3a63756747c5d45c8c6/raw/d039693f1654aa3ced9078308f424ef0b6d0c66e/1.py">作業連結</a></p>
<p>心得:<span>學習到 Brython 的基本繪圖操作，對幾何圖形的理解，處理座標系與視覺化資料的能力，使用網路搜尋也更快速為我解答，從中學到了程式如何修改。</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Q63qDY3D80o?si=nj9ZrE2pximwCxgW" title="YouTube video player" width="560"></iframe></p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-41124116/content/Brython.html?src=https://gist.githubusercontent.com/41124116/0b1760ab16e3017099e22892348f484c/raw/3656027288d3ab309318c23b88aa5b71e170f0a2/41124116.py">程式碼</a></p>
<p><span>心得:學習到規劃座標系和確定基準點，準確的繪製圖形，有空閒機會可能可以做一些小遊戲，也讓自己多練習，讓自己更熟悉更進步。</span></p>
<p></p><h3>w16_exam3</h3>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>